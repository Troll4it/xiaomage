/**
 * 动态数组、链表复杂度分析
 */
//             List       LinkList
// add()       O(n)         O（n）
// remove()    O(n)         O（n）
// set()       O(1)         O（n）
// get()       O(1)         O（n）


// 树的基本概念
// * 节点的度：子树的个数
// * 树的度：所有节点度中的最大值
// * 节点的深度：从根节点到当前节点的唯一路劲的总数
// * 节点的高度：从当前节点到最远叶子节点的路径上的节点总数
// * 树的深度：所有节点深度的最大值
// * 树的高度：所有节点高度的最大值


// 二叉树性质
// * 非空二叉树的第i层，最多有 2 ^ i-1 个节点 （i >= 1）
// * 高度为h的二叉树最多有 2^h - 1 个节点 （h >= 1）
// * 对于任何一颗非空二叉树，如果叶子节点的个数为n0 , 度为2的节点个数为n2,那么：n0 = n2 + 1
// * 度为1的节点个数为n1,那么二叉树的节点总数 n = n0 + n1 + n2
// * 二叉树的边数 T = n1 + n2 * 2 = n - 1= n0 + n1 + n2 - 1


// 完成二叉树：一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，如果编号为i（1≤i≤n）的结点与满二叉树中编号为i的结点在二叉树中的位置相同，则这棵二叉树称为完全二叉树
// 完全二叉树，叶子节点n1 要么是0 要么为1
// * 至少有2 ^ h-1 节点 （2^0 + 2^1 + 2^2 +..... + 2^h-2 + 1）
// * 最多有2^h — 1 节点 （2^0 + 2^1 + 2^2 +..... + 2^h-1 ） 满二叉树
// * 总节点数量为n       2^h-1 <= n < 2^h     h-1 <= log2n < h    h = floor(log2n) + 1



